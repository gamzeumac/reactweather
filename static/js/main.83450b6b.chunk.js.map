{"version":3,"sources":["components/Weatherresult.js","App.js","index.js"],"names":["Weatherresult","date","humidity","temp","icon","condition","Container","style","color","Row","Col","whiteSpace","fontWeight","height","src","alt","App","frontendUrl","process","API_KEY","useState","wheatherData","setWheatherData","inputValue","setInputValue","cityName","setCityName","error","setError","loading","setLoading","value","a","fetch","data","json","result","forecast","forecastday","className","onSubmit","e","preventDefault","getdata","type","placeholder","onChange","target","width","map","item","index","day","text","avgtemp_c","avghumidity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAkBeA,EAdO,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,KAAKC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAC/C,OACG,cAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,MAAM,SAAzB,SACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAMH,MAAO,CAACC,MAAM,OAApB,SAA6BP,IAC7B,eAACS,EAAA,EAAD,CAAKH,MAAO,CAACC,MAAM,mBAAoBG,WAAY,SAAUC,WAAW,QAAxE,UAAkFT,EAAlF,QACA,cAACO,EAAA,EAAD,UAAK,qBAAKH,MAAO,CAACM,OAAO,OAAQC,IAAKV,EAAMW,IAAI,OAChD,cAACL,EAAA,EAAD,CAAKH,MAAO,CAACC,MAAM,OAAnB,SAA4BH,IAC5B,eAACK,EAAA,EAAD,WAAMR,EAAN,a,iBCmEMc,MAzEf,WACE,IAAMC,EAAcC,gJAAYC,QAGhC,EAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAA0BN,oBAAS,GAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KARa,4CAeb,WAAuBC,GAAvB,iBAAAC,EAAA,6DACEF,GAAW,GADb,kBAGuBG,MAAM,kDAAD,OAC4BhB,EAD5B,cAC6Cc,EAD7C,6BAH5B,cAGUG,EAHV,gBAMyBA,EAAKC,OAN9B,OAMUC,EANV,OAOId,EAAgBc,EAAOC,SAASC,aAChCV,GAAS,GACTE,GAAW,GATf,kDAWIF,GAAS,GACTE,GAAW,GAZf,2DAfa,sBAoCb,OACE,gCACC,uBAAMS,UAAU,SAASC,SARP,SAACC,GACpBA,EAAEC,iBACFhB,EAAYH,GAhCD,oCAiCXoB,CAAQpB,GACRC,EAAc,KAIb,UACG,uBACEoB,KAAK,OACLC,YAAY,gBACZd,MAAOR,EACPuB,SAjCS,SAACL,GAChBA,EAAEC,iBACFlB,EAAciB,EAAEM,OAAOhB,UAiCnB,wBAAQa,KAAK,SAAb,wBAEAf,GAAWF,EACX,qBAAKY,UAAU,QAAf,uDACGV,EAgBH,cAAC,IAAD,CAAcU,UAAU,UAAUK,KAAK,kBAAkBpC,MAAM,mBAAmBK,OAAQ,GAAImC,MAAO,KAfrG,gCACE,+BAAKvB,EAAL,6BAECJ,EAAa4B,KAAI,SAACC,EAAMC,GAAP,OAChB,cAAC,EAAD,CAEElD,KAAMiD,EAAKjD,KACXG,KAAM8C,EAAKE,IAAI/C,UAAUD,KACzBC,UAAW6C,EAAKE,IAAI/C,UAAUgD,KAC9BlD,KAAM+C,EAAKE,IAAIE,UACfpD,SAAUgD,EAAKE,IAAIG,aALdJ,aCvDnBK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.83450b6b.chunk.js","sourcesContent":["import React from 'react';\n// import \"./weatherresult.css\";\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst Weatherresult = ({date, humidity, temp,icon, condition}) => {\n    return (\n       <Container style={{color:\"white\"}}>\n       <Row>\n         <Col  style={{color:\"40%\"}}>{date}</Col>\n         <Col style={{color:\"rgb(255, 217, 0)\", whiteSpace: \"nowrap\", fontWeight:\"bold\"}}>{temp} C</Col>\n         <Col><img style={{height:\"60%\"}} src={icon} alt=\"\"/></Col>\n         <Col style={{color:\"50%\"}}>{condition}</Col>\n         <Col>{humidity}%</Col>\n       </Row>\n     </Container>\n    )\n}\n\nexport default Weatherresult;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Weatherresult from \"./components/Weatherresult\";\nimport ReactLoading from 'react-loading';\n\n\nfunction App() {\n  const frontendUrl = process.env.API_KEY;\n  \n\n  const [wheatherData, setWheatherData] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [cityName, setCityName] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const citytext = (e) => {\n    e.preventDefault();\n    setInputValue(e.target.value);\n  };\n\n  async function getdata(value) {\n    setLoading(true);\n    try {\n      const data = await fetch(\n        `http://api.weatherapi.com/v1/forecast.json?key=${frontendUrl}&q=${value}&days=3&aqi=no&alerts=no`\n      );\n      const result = await data.json();\n      setWheatherData(result.forecast.forecastday);\n      setError(false);\n      setLoading(false);\n    } catch (e) {\n      setError(true);\n      setLoading(false);\n    }\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setCityName(inputValue);\n    getdata(inputValue);\n    setInputValue(\"\");\n  };\n  return (\n    <div>\n     <form className=\"search\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Search a City\"\n          value={inputValue}\n          onChange={citytext}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {!loading && error ? (\n        <div className=\"wrong\">you misspelled or something went wrong...</div>\n      ) : !loading ? (\n        <div>\n          <h2>{cityName} next three three days </h2>\n\n          {wheatherData.map((item, index) => (\n            <Weatherresult\n              key={index}\n              date={item.date}\n              icon={item.day.condition.icon}\n              condition={item.day.condition.text}\n              temp={item.day.avgtemp_c}\n              humidity={item.day.avghumidity}\n            />\n          ))}\n        </div>\n      ) : (\n        <ReactLoading className=\"loading\" type=\"spinningBubbles\" color=\"rgb(255, 217, 0)\" height={97} width={97} />\n       \n\n      )}\n    </div>\n  );\n}\n\nexport default App;\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}